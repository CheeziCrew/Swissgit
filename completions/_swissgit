# Define completion for swissgit commands
_swissgit() {
    local state
    local -a commands
    local -a options

    commands=(
        'status:Recursively checks the status of repositories. If current dir is a git repo, it will only check that repo.'
        'branches:Recursively checks the branch status of repositories. If current dir is a git repo, it will only check that repo.'
        'cleanup:Clean up your repositories. Check out and update main, drop merged branches and drop no longer needed changes.'
        'clone:Clone a teams repositories with SSH. Requires a personal access token.'
        'commit:Create and push a commit on the current branch or a new one. Without a PR.'
        'pullrequest:Create a pull request. Creates a branch, commits all your changes, and creates a pull request.'
        'help:Show help message and exit'
    )

    _arguments -s -S \
        '1: :->command' \
        '*:: :->option' && return 0

    case $state in
    command)
        _describe -t commands 'swissgit commands' commands && return 0
        ;;
    option)
        case $words[1] in
        branches)
            options=(
                '-h:Show help message and exit'
            )
            ;;
        cleanup)
            options=(
                '-h:Show help message and exit'
                '-a:Apply cleanup to all repositories in the target directory, including subdirectories'
                '-d:Drop all changes in the repositories. This will reset the repository to the last commit and remove untracked files'
                '-f:Specify the target directory where the repositories are located. Defaults to the current directory'
                '-s:Stash local changes'
            )
            ;;
        clone)
            options=(
                '-h:Show help message and exit'
                '-o:Specify the GitHub organization'
                '-t:The target directory where the repositories should be cloned to. Defaults to the current directory'
                '-k:Specify the GitHub personal access token'
                '-f:Specify the target directory for cloning. Defaults to the current directory'
            )
            ;;
        commit)
            options=(
                '-h:Show help message and exit'
                '-a:Apply the operation to all repositories in the current directory'
                '-c:Specify the commit message'
                '-b:Specify the branch name to commit to. If the branch does not exist, it will be created.'
                '-n:Do not push the commit to the remote repository'
            )
            ;;
        pullrequest)
            options=(
                '-h:Show help message and exit'
                '-a:Apply the operation to all repositories in the current directory'
                '-c:Specify the commit message'
                '-b:Specify the branch name to commit to. If the branch does not exist, it will be created'
                '-p:Specify the body of the pull request'
            )
            ;;

        status)
            options=(
                '-h:Show help message and exit'
            )
            ;;
        esac
        _describe -t options 'option' options && return 0
        ;;
    esac
}

compdef _swissgit swissgit
